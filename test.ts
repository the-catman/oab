import { Lookup, OABDATA, Reader, Writer } from "./index.ts";

// This function simply gets the lookup table of any particular object.

function getKeys(obj: Record<string, any>): string[] {
    const keys: Set<string> = new Set();

    function collectKeys(currentObj: any) {
        for (const key in currentObj) {
            keys.add(key);
            const value = currentObj[key];

            if (typeof value === 'object' && value !== null) {
                if (Array.isArray(value)) {
                    value.forEach(item => {
                        if (item && typeof item === 'object') {
                            collectKeys(item);
                        }
                    });
                } else {
                    collectKeys(value);
                }
            }
        }
    }
    collectKeys(obj);
    return Array.from(keys);
}

const sampleData: OABDATA = { // Some sample data automatically generated by yours truly (yeah I couldn't be bothered to type it out).
    "user": {
        "id": 1,
        "name": "John Doe",
        "email": "john.doe@example.com",
        "isActive": true,
        "relationshipStatus": "married",
        "isMale": true,
        "spouseName": "Wang Mei (王梅)",
        "age": 30,
        "socialCreditScore": -5,
        "roles": ["admin", "user"],
        "profile": {
            "bio": "Software developer with a passion for open-source. Enjoys traveling and learning new languages.",
            "website": null,
            "socialMedia": {
                "twitter": "@johndoe",
                "linkedin": "linkedin.com/in/johndoe",
                "facebook": "facebook.com/johndoe",
                "instagram": null
            },
            "favoriteColors": ["#FF5733", "#33FF57", "#3357FF"],
            "isVerified": true
        }
    },
    "posts": [
        {
            "id": 101,
            "title": "Introduction to JSON",
            "content": "JSON is a lightweight data interchange format that is easy to read and write.",
            "tags": ["json", "data", "format"],
            "createdAt": "2023-10-01T10:00:00Z",
            "likes": 150,
            "commentsCount": 10,
            "isArchived": false,
            "views": 1200
        },
        {
            "id": 102,
            "title": "Understanding Endianness",
            "content": "Endianness refers to the order of bytes in binary representation. This article explains its importance.",
            "tags": ["endianness", "programming", "binary"],
            "createdAt": "2023-10-15T14:30:00Z",
            "likes": 89,
            "commentsCount": 6,
            "isArchived": true,
            "views": 800
        },
        {
            "id": 103,
            "title": "The Future of AI",
            "content": "Artificial intelligence is rapidly evolving, and its potential impact on society is immense.",
            "tags": ["AI", "future", "technology"],
            "createdAt": "2023-11-05T09:00:00Z",
            "likes": 250,
            "commentsCount": 25,
            "isArchived": false,
            "views": 3200
        }
    ],
    "comments": [
        {
            "postId": 101,
            "userId": 2,
            "comment": "Great article! Very informative.",
            "createdAt": "2023-10-02T09:00:00Z",
            "likes": 5,
            "isFlagged": false
        },
        {
            "postId": 102,
            "userId": 3,
            "comment": "Very informative. Thanks for explaining Endianness.",
            "createdAt": "2023-10-16T11:45:00Z",
            "likes": 3,
            "isFlagged": true
        },
        {
            "postId": 101,
            "userId": 4,
            "comment": "This cleared up a lot of confusion I had. Thanks!",
            "createdAt": "2023-10-05T08:15:00Z",
            "likes": 8,
            "isFlagged": false
        },
        {
            "postId": 103,
            "userId": 5,
            "comment": "AI is fascinating! The possibilities are endless.",
            "createdAt": "2023-11-06T10:30:00Z",
            "likes": 12,
            "isFlagged": false
        }
    ],
    "meta": {
        "totalPosts": 3,
        "totalComments": 4,
        "lastUpdated": "2023-11-10T16:00:00Z",
        "activeUsers": 5,
        "platform": "Web"
    },
    "miscData": [
        null,
        42,
        "randomString",
        true,
        { "nestedObject": { "key1": "value1", "key2": "value2" } },
        [1, 2, 3, 4, 5],
        null,
        [null, null, "mix"],
        { "test": [1, 2, 3] }
    ]
};

/* One small thing is that floats aren't used in the testing data because 32 bit precision float (which is what my library uses)
is different than the double precision float that JavaScript (and, consequently, JSON) uses. It should be 100% overlap other
than that.*/


function check(lookup?: Lookup) {
    const writerData = new Writer({ lookup }).data(sampleData).out();
    const JSONdata = JSON.stringify(sampleData);

    const sanityCheck = new Reader(writerData, { lookup }).data();

    if (JSONdata === JSON.stringify(sanityCheck)) {
        console.log("Sanity checks passed!");
    } else {
        console.log("Something went wrong!", sanityCheck);
        throw new Error("Something went wrong!");
    }

    console.log(`Writer data length: ${writerData.length}, JSON length: ${JSONdata.length}.`);
    console.log(`Total data saved: ${JSONdata.length - writerData.length} bytes.`);

    const iters = 500000;

    let date = Date.now();

    for (let i = 0; i < iters; i++) {
        let someData = new Reader(
            new Writer({ lookup }).data(sampleData).out(),
            { lookup }
        ).data();
        (someData as { [key: string]: OABDATA }).test = 1;
    }

    console.log(`OAB Speed: ${writerData.length / ((Date.now() - date) / 1000) * iters / 1000000} MB/s`);

    date = Date.now();

    for (let i = 0; i < iters; i++) {
        let someData = JSON.parse(JSON.stringify(sampleData));
        someData.test = 1;
    }

    console.log(`JSON Speed: ${JSONdata.length / ((Date.now() - date) / 1000) * iters / 1000000} MB/s`);
}

console.log("Full lookup test:");
check(getKeys(sampleData));

console.log("\n\nNo lookup test:");
check();
